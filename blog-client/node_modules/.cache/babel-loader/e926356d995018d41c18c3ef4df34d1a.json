{"ast":null,"code":"function assertSigningAlgValuesSupport(endpoint, issuer, properties) {\n  if (!issuer[`${endpoint}_endpoint`]) return;\n  const eam = `${endpoint}_endpoint_auth_method`;\n  const easa = `${endpoint}_endpoint_auth_signing_alg`;\n  const easavs = `${endpoint}_endpoint_auth_signing_alg_values_supported`;\n\n  if (properties[eam] && properties[eam].endsWith('_jwt') && !properties[easa] && !issuer[easavs]) {\n    throw new TypeError(`${easavs} must be configured on the issuer if ${easa} is not defined on a client`);\n  }\n}\n\nfunction assertIssuerConfiguration(issuer, endpoint) {\n  if (!issuer[endpoint]) {\n    throw new TypeError(`${endpoint} must be configured on the issuer`);\n  }\n}\n\nmodule.exports = {\n  assertSigningAlgValuesSupport,\n  assertIssuerConfiguration\n};","map":{"version":3,"sources":["/Users/veronica/Documents/react-portfolio-2021/portfolio-2021/node_modules/openid-client/lib/helpers/assert.js"],"names":["assertSigningAlgValuesSupport","endpoint","issuer","properties","eam","easa","easavs","endsWith","TypeError","assertIssuerConfiguration","module","exports"],"mappings":"AAAA,SAASA,6BAAT,CAAuCC,QAAvC,EAAiDC,MAAjD,EAAyDC,UAAzD,EAAqE;AACnE,MAAI,CAACD,MAAM,CAAE,GAAED,QAAS,WAAb,CAAX,EAAqC;AAErC,QAAMG,GAAG,GAAI,GAAEH,QAAS,uBAAxB;AACA,QAAMI,IAAI,GAAI,GAAEJ,QAAS,4BAAzB;AACA,QAAMK,MAAM,GAAI,GAAEL,QAAS,6CAA3B;;AAEA,MAAIE,UAAU,CAACC,GAAD,CAAV,IAAmBD,UAAU,CAACC,GAAD,CAAV,CAAgBG,QAAhB,CAAyB,MAAzB,CAAnB,IAAuD,CAACJ,UAAU,CAACE,IAAD,CAAlE,IAA4E,CAACH,MAAM,CAACI,MAAD,CAAvF,EAAiG;AAC/F,UAAM,IAAIE,SAAJ,CAAe,GAAEF,MAAO,wCAAuCD,IAAK,6BAApE,CAAN;AACD;AACF;;AAED,SAASI,yBAAT,CAAmCP,MAAnC,EAA2CD,QAA3C,EAAqD;AACnD,MAAI,CAACC,MAAM,CAACD,QAAD,CAAX,EAAuB;AACrB,UAAM,IAAIO,SAAJ,CAAe,GAAEP,QAAS,mCAA1B,CAAN;AACD;AACF;;AAEDS,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,6BADe;AAEfS,EAAAA;AAFe,CAAjB","sourcesContent":["function assertSigningAlgValuesSupport(endpoint, issuer, properties) {\n  if (!issuer[`${endpoint}_endpoint`]) return;\n\n  const eam = `${endpoint}_endpoint_auth_method`;\n  const easa = `${endpoint}_endpoint_auth_signing_alg`;\n  const easavs = `${endpoint}_endpoint_auth_signing_alg_values_supported`;\n\n  if (properties[eam] && properties[eam].endsWith('_jwt') && !properties[easa] && !issuer[easavs]) {\n    throw new TypeError(`${easavs} must be configured on the issuer if ${easa} is not defined on a client`);\n  }\n}\n\nfunction assertIssuerConfiguration(issuer, endpoint) {\n  if (!issuer[endpoint]) {\n    throw new TypeError(`${endpoint} must be configured on the issuer`);\n  }\n}\n\nmodule.exports = {\n  assertSigningAlgValuesSupport,\n  assertIssuerConfiguration,\n};\n"]},"metadata":{},"sourceType":"script"}