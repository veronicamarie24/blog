{"ast":null,"code":"/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst passport = require('passport');\n\nconst OpenIdClient = require('openid-client');\n\nconst Negotiator = require('negotiator');\n\nconst os = require('os');\n\nconst pkg = require('../package.json');\n\nconst OpenIdClientStrategy = OpenIdClient.Strategy;\nconst Issuer = OpenIdClient.Issuer;\nconst custom = OpenIdClient.custom;\nconst oidcUtil = module.exports;\n\nfunction customizeUserAgent(options) {\n  /**\n   * Parse out the default user agent for the openid-client library, which currently looks like:\n   *\n   * openid-client/1.15.0 (https://github.com/panva/node-openid-client)\n   *\n   * We strip off the github link because it's not necessary.\n   */\n  options = options || {};\n  const headers = options.headers || {};\n  let clientUserAgent = headers['User-Agent'];\n\n  if (typeof clientUserAgent === 'string') {\n    clientUserAgent = ' ' + clientUserAgent.split(' ')[0];\n  } else {\n    clientUserAgent = '';\n  }\n\n  const userAgent = `${pkg.name}/${pkg.version}${clientUserAgent} node/${process.versions.node} ${os.platform()}/${os.release()}`;\n  headers['User-Agent'] = userAgent;\n  options.headers = headers;\n  return options;\n}\n\noidcUtil.createClient = context => {\n  const {\n    issuer,\n    client_id,\n    client_secret,\n    loginRedirectUri: redirect_uri,\n    maxClockSkew,\n    timeout\n  } = context.options;\n\n  Issuer[custom.http_options] = function (options) {\n    options = customizeUserAgent(options);\n    options.timeout = timeout || 10000;\n    return options;\n  };\n\n  return Issuer.discover(issuer + '/.well-known/openid-configuration').then(iss => {\n    const client = new iss.Client({\n      client_id,\n      client_secret,\n      redirect_uris: [redirect_uri]\n    });\n\n    client[custom.http_options] = options => {\n      options = customizeUserAgent(options);\n      options.timeout = timeout || 10000;\n      return options;\n    };\n\n    client[custom.clock_tolerance] = maxClockSkew;\n    return client;\n  });\n};\n\noidcUtil.bootstrapPassportStrategy = context => {\n  const oidcStrategy = new OpenIdClientStrategy({\n    params: {\n      scope: context.options.scope\n    },\n    sessionKey: context.options.sessionKey,\n    client: context.client\n  }, (tokenSet, callbackArg1, callbackArg2) => {\n    let done;\n    let userinfo;\n\n    if (typeof callbackArg2 !== 'undefined') {\n      done = callbackArg2;\n      userinfo = callbackArg1;\n    } else {\n      done = callbackArg1;\n    }\n\n    if (tokenSet) {\n      return userinfo ? done(null, {\n        userinfo,\n        tokens: tokenSet\n      }) : done(null, {\n        tokens: tokenSet\n      });\n    } else {\n      return done(null);\n    }\n  }); // bypass passport's serializers\n\n  passport.serializeUser((user, done) => done(null, user));\n  passport.deserializeUser((user, done) => done(null, user));\n  passport.use('oidc', oidcStrategy);\n};\n\noidcUtil.ensureAuthenticated = (context, options = {}) => {\n  return (req, res, next) => {\n    const isAuthenticated = req.isAuthenticated && req.isAuthenticated();\n\n    if (isAuthenticated) {\n      return next();\n    }\n\n    const negotiator = new Negotiator(req);\n\n    if (negotiator.mediaType() === 'text/html') {\n      if (!isAuthenticated) {\n        if (req.session) {\n          req.session.returnTo = req.originalUrl || req.url;\n        }\n\n        const url = options.redirectTo || context.options.routes.login.path;\n        return res.redirect(url);\n      }\n\n      next();\n    } else {\n      res.sendStatus(401);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/veronica/Documents/react-portfolio-2021/portfolio-2021/node_modules/@okta/oidc-middleware/src/oidcUtil.js"],"names":["passport","require","OpenIdClient","Negotiator","os","pkg","OpenIdClientStrategy","Strategy","Issuer","custom","oidcUtil","module","exports","customizeUserAgent","options","headers","clientUserAgent","split","userAgent","name","version","process","versions","node","platform","release","createClient","context","issuer","client_id","client_secret","loginRedirectUri","redirect_uri","maxClockSkew","timeout","http_options","discover","then","iss","client","Client","redirect_uris","clock_tolerance","bootstrapPassportStrategy","oidcStrategy","params","scope","sessionKey","tokenSet","callbackArg1","callbackArg2","done","userinfo","tokens","serializeUser","user","deserializeUser","use","ensureAuthenticated","req","res","next","isAuthenticated","negotiator","mediaType","session","returnTo","originalUrl","url","redirectTo","routes","login","path","redirect","sendStatus"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nconst passport = require('passport');\nconst OpenIdClient = require('openid-client');\nconst Negotiator = require('negotiator');\nconst os = require('os');\n\nconst pkg = require('../package.json');\n\nconst OpenIdClientStrategy = OpenIdClient.Strategy;\nconst Issuer = OpenIdClient.Issuer;\nconst custom = OpenIdClient.custom;\n\nconst oidcUtil = module.exports;\n\nfunction customizeUserAgent(options) {\n  /**\n   * Parse out the default user agent for the openid-client library, which currently looks like:\n   *\n   * openid-client/1.15.0 (https://github.com/panva/node-openid-client)\n   *\n   * We strip off the github link because it's not necessary.\n   */\n  options = options || {};\n  const headers = options.headers || {};\n  let clientUserAgent = headers['User-Agent'];\n  if (typeof clientUserAgent === 'string') {\n    clientUserAgent = ' ' + clientUserAgent.split(' ')[0]\n  } else {\n    clientUserAgent = '';\n  }\n\n  const userAgent = `${pkg.name}/${pkg.version}${clientUserAgent} node/${process.versions.node} ${os.platform()}/${os.release()}`;\n  headers['User-Agent'] = userAgent;\n\n  options.headers = headers;\n  return options;\n}\n\noidcUtil.createClient = context => {\n  const {\n    issuer,\n    client_id,\n    client_secret,\n    loginRedirectUri: redirect_uri,\n    maxClockSkew,\n    timeout\n  } = context.options;\n\n  Issuer[custom.http_options] = function(options) {\n    options = customizeUserAgent(options);\n    options.timeout = timeout || 10000;\n    return options;\n  };\n\n  return Issuer.discover(issuer +  '/.well-known/openid-configuration')\n  .then(iss => {\n    const client = new iss.Client({\n      client_id,\n      client_secret,\n      redirect_uris: [\n        redirect_uri\n      ]\n    });\n    client[custom.http_options] = options => {\n      options = customizeUserAgent(options);\n      options.timeout = timeout || 10000;\n      return options;\n    };\n    client[custom.clock_tolerance] = maxClockSkew;\n\n    return client;\n  });\n};\n\noidcUtil.bootstrapPassportStrategy = context => {\n  const oidcStrategy = new OpenIdClientStrategy({\n    params: {\n      scope: context.options.scope\n    },\n    sessionKey: context.options.sessionKey,\n    client: context.client\n  }, (tokenSet, callbackArg1, callbackArg2) => {\n    let done;\n    let userinfo;\n\n    if (typeof(callbackArg2) !== 'undefined') {\n      done = callbackArg2;\n      userinfo = callbackArg1;\n    } else {\n      done = callbackArg1;\n    }\n\n    if(tokenSet) {\n      return userinfo ?\n        done(null, {\n          userinfo,\n          tokens: tokenSet,\n        }) :\n        done(null, {\n          tokens: tokenSet\n        });\n    } else {\n      return done(null);\n    }\n  });\n\n  // bypass passport's serializers\n  passport.serializeUser((user, done) => done(null, user));\n  passport.deserializeUser((user, done) => done(null, user));\n  passport.use('oidc', oidcStrategy);\n};\n\noidcUtil.ensureAuthenticated = (context, options = {}) => {\n  return (req, res, next) => {\n    const isAuthenticated = req.isAuthenticated && req.isAuthenticated();\n    if (isAuthenticated) {\n      return next();\n    }\n    const negotiator = new Negotiator(req);\n    if (negotiator.mediaType() === 'text/html') {\n      if (!isAuthenticated) {\n        if (req.session) {\n          req.session.returnTo = req.originalUrl || req.url;\n        }\n\n        const url = options.redirectTo || context.options.routes.login.path;\n        return res.redirect(url);\n      }\n\n      next();\n    } else {\n      res.sendStatus(401);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}