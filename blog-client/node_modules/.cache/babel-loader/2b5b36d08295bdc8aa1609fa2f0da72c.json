{"ast":null,"code":"/* eslint-disable camelcase */\nconst {\n  inspect\n} = require('util');\n\nconst {\n  RPError,\n  OPError\n} = require('./errors');\n\nconst instance = require('./helpers/weak_cache');\n\nconst now = require('./helpers/unix_timestamp');\n\nconst {\n  authenticatedPost\n} = require('./helpers/client');\n\nconst processResponse = require('./helpers/process_response');\n\nconst TokenSet = require('./token_set');\n\nclass DeviceFlowHandle {\n  constructor({\n    client,\n    exchangeBody,\n    clientAssertionPayload,\n    response,\n    maxAge\n  }) {\n    ['verification_uri', 'user_code', 'device_code'].forEach(prop => {\n      if (typeof response[prop] !== 'string' || !response[prop]) {\n        throw new RPError(`expected ${prop} string to be returned by Device Authorization Response, got %j`, response[prop]);\n      }\n    });\n\n    if (!Number.isSafeInteger(response.expires_in)) {\n      throw new RPError('expected expires_in number to be returned by Device Authorization Response, got %j', response.expires_in);\n    }\n\n    instance(this).expires_at = now() + response.expires_in;\n    instance(this).client = client;\n    instance(this).maxAge = maxAge;\n    instance(this).exchangeBody = exchangeBody;\n    instance(this).clientAssertionPayload = clientAssertionPayload;\n    instance(this).response = response;\n    instance(this).interval = response.interval * 1000 || 5000;\n  }\n\n  async poll() {\n    if (this.expired()) {\n      throw new RPError('the device code %j has expired and the device authorization session has concluded', this.device_code);\n    }\n\n    await new Promise(resolve => setTimeout(resolve, instance(this).interval));\n    const response = await authenticatedPost.call(instance(this).client, 'token', {\n      form: true,\n      body: { ...instance(this).exchangeBody,\n        grant_type: 'urn:ietf:params:oauth:grant-type:device_code',\n        device_code: this.device_code\n      },\n      json: true\n    }, {\n      clientAssertionPayload: instance(this).clientAssertionPayload\n    });\n    let responseBody;\n\n    try {\n      responseBody = processResponse(response);\n    } catch (err) {\n      switch (err instanceof OPError && err.error) {\n        case 'slow_down':\n          instance(this).interval += 5000;\n\n        case 'authorization_pending':\n          // eslint-disable-line no-fallthrough\n          return this.poll();\n\n        default:\n          throw err;\n      }\n    }\n\n    const tokenset = new TokenSet(responseBody);\n\n    if ('id_token' in tokenset) {\n      await instance(this).client.decryptIdToken(tokenset);\n      await instance(this).client.validateIdToken(tokenset, undefined, 'token', instance(this).maxAge);\n    }\n\n    return tokenset;\n  }\n\n  get device_code() {\n    return instance(this).response.device_code;\n  }\n\n  get user_code() {\n    return instance(this).response.user_code;\n  }\n\n  get verification_uri() {\n    return instance(this).response.verification_uri;\n  }\n\n  get verification_uri_complete() {\n    return instance(this).response.verification_uri_complete;\n  }\n\n  get expires_in() {\n    return Math.max.apply(null, [instance(this).expires_at - now(), 0]);\n  }\n\n  expired() {\n    return this.expires_in === 0;\n  }\n  /* istanbul ignore next */\n\n\n  [inspect.custom]() {\n    return `${this.constructor.name} ${inspect(instance(this).response, {\n      depth: Infinity,\n      colors: process.stdout.isTTY,\n      compact: false,\n      sorted: true\n    })}`;\n  }\n\n}\n\nmodule.exports = DeviceFlowHandle;","map":{"version":3,"sources":["/Users/veronica/Documents/react-portfolio-2021/portfolio-2021/node_modules/openid-client/lib/device_flow_handle.js"],"names":["inspect","require","RPError","OPError","instance","now","authenticatedPost","processResponse","TokenSet","DeviceFlowHandle","constructor","client","exchangeBody","clientAssertionPayload","response","maxAge","forEach","prop","Number","isSafeInteger","expires_in","expires_at","interval","poll","expired","device_code","Promise","resolve","setTimeout","call","form","body","grant_type","json","responseBody","err","error","tokenset","decryptIdToken","validateIdToken","undefined","user_code","verification_uri","verification_uri_complete","Math","max","apply","custom","name","depth","Infinity","colors","process","stdout","isTTY","compact","sorted","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nconst { inspect } = require('util');\n\nconst { RPError, OPError } = require('./errors');\nconst instance = require('./helpers/weak_cache');\nconst now = require('./helpers/unix_timestamp');\nconst { authenticatedPost } = require('./helpers/client');\nconst processResponse = require('./helpers/process_response');\nconst TokenSet = require('./token_set');\n\nclass DeviceFlowHandle {\n  constructor({\n    client, exchangeBody, clientAssertionPayload, response, maxAge,\n  }) {\n    ['verification_uri', 'user_code', 'device_code'].forEach((prop) => {\n      if (typeof response[prop] !== 'string' || !response[prop]) {\n        throw new RPError(`expected ${prop} string to be returned by Device Authorization Response, got %j`, response[prop]);\n      }\n    });\n\n    if (!Number.isSafeInteger(response.expires_in)) {\n      throw new RPError('expected expires_in number to be returned by Device Authorization Response, got %j', response.expires_in);\n    }\n\n    instance(this).expires_at = now() + response.expires_in;\n    instance(this).client = client;\n    instance(this).maxAge = maxAge;\n    instance(this).exchangeBody = exchangeBody;\n    instance(this).clientAssertionPayload = clientAssertionPayload;\n    instance(this).response = response;\n    instance(this).interval = response.interval * 1000 || 5000;\n  }\n\n  async poll() {\n    if (this.expired()) {\n      throw new RPError('the device code %j has expired and the device authorization session has concluded', this.device_code);\n    }\n\n    await new Promise((resolve) => setTimeout(resolve, instance(this).interval));\n\n    const response = await authenticatedPost.call(\n      instance(this).client,\n      'token',\n      {\n        form: true,\n        body: {\n          ...instance(this).exchangeBody,\n          grant_type: 'urn:ietf:params:oauth:grant-type:device_code',\n          device_code: this.device_code,\n        },\n        json: true,\n      },\n      { clientAssertionPayload: instance(this).clientAssertionPayload },\n    );\n\n    let responseBody;\n    try {\n      responseBody = processResponse(response);\n    } catch (err) {\n      switch (err instanceof OPError && err.error) {\n        case 'slow_down':\n          instance(this).interval += 5000;\n        case 'authorization_pending': // eslint-disable-line no-fallthrough\n          return this.poll();\n        default:\n          throw err;\n      }\n    }\n\n    const tokenset = new TokenSet(responseBody);\n\n    if ('id_token' in tokenset) {\n      await instance(this).client.decryptIdToken(tokenset);\n      await instance(this).client.validateIdToken(tokenset, undefined, 'token', instance(this).maxAge);\n    }\n\n    return tokenset;\n  }\n\n  get device_code() {\n    return instance(this).response.device_code;\n  }\n\n  get user_code() {\n    return instance(this).response.user_code;\n  }\n\n  get verification_uri() {\n    return instance(this).response.verification_uri;\n  }\n\n  get verification_uri_complete() {\n    return instance(this).response.verification_uri_complete;\n  }\n\n  get expires_in() {\n    return Math.max.apply(null, [instance(this).expires_at - now(), 0]);\n  }\n\n  expired() {\n    return this.expires_in === 0;\n  }\n\n  /* istanbul ignore next */\n  [inspect.custom]() {\n    return `${this.constructor.name} ${inspect(instance(this).response, {\n      depth: Infinity,\n      colors: process.stdout.isTTY,\n      compact: false,\n      sorted: true,\n    })}`;\n  }\n}\n\nmodule.exports = DeviceFlowHandle;\n"]},"metadata":{},"sourceType":"script"}