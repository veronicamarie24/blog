{"ast":null,"code":"/*!\n * Copyright (c) 2019-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst fetch = require('node-fetch');\n\nconst querystring = require('querystring');\n\nconst OIDCMiddlewareError = require('./OIDCMiddlewareError');\n\nconst logout = module.exports;\n\nconst makeErrorHandler = emitter => err => {\n  // Emit the errors outside the promise chain so they can be received by event listeners\n  setTimeout(function () {\n    emitter.emit('error', err);\n  }, 1);\n};\n\nconst makeAuthorizationHeader = ({\n  client_id,\n  client_secret\n}) => 'Basic ' + Buffer.from(`${client_id}:${client_secret}`).toString('base64');\n\nconst makeTokenRevoker = ({\n  issuer,\n  client_id,\n  client_secret,\n  errorHandler\n}) => {\n  const revokeEndpoint = `${issuer}/v1/revoke`;\n  return ({\n    token_hint,\n    token\n  }) => {\n    return fetch(revokeEndpoint, {\n      method: 'POST',\n      headers: {\n        'accepts': 'application/json',\n        'content-type': 'application/x-www-form-urlencoded',\n        'authorization': makeAuthorizationHeader({\n          client_id,\n          client_secret\n        })\n      },\n      body: querystring.stringify({\n        token,\n        token_type_hint: token_hint\n      })\n    }) // eslint-disable-next-line promise/no-nesting\n    .then(r => r.ok ? r : r.text().then(message => Promise.reject(new OIDCMiddlewareError('revokeError', message)))).catch(errorHandler); // catch and emit - this promise chain can never fail\n  };\n};\n\nlogout.forceLogoutAndRevoke = context => {\n  const emitter = context.emitter;\n  let {\n    issuer,\n    client_id,\n    client_secret\n  } = context.options;\n  const REVOKABLE_TOKENS = ['refresh_token', 'access_token']; // Support ORG Authorization Server\n\n  if (issuer.indexOf('/oauth2') === -1) {\n    issuer = issuer + '/oauth2';\n  }\n\n  const revokeToken = makeTokenRevoker({\n    issuer,\n    client_id,\n    client_secret,\n    errorHandler: makeErrorHandler(emitter)\n  });\n  return async (req, res\n  /*, next */\n  ) => {\n    const tokens = req.userContext.tokens;\n\n    const revokeIfExists = token_hint => tokens[token_hint] ? revokeToken({\n      token_hint,\n      token: tokens[token_hint]\n    }) : null;\n\n    const revokes = REVOKABLE_TOKENS.map(revokeIfExists); // clear local session\n\n    req.logout(); // attempt all revokes\n\n    await Promise.all(revokes); // these capture (emit) all rejections, no wrapping catch needed, no early fail of .all()\n\n    const params = {\n      id_token_hint: tokens.id_token,\n      post_logout_redirect_uri: context.options.logoutRedirectUri\n    }; // redirect to Okta to clear SSO session\n\n    const endOktaSessionEndpoint = `${issuer}/v1/logout?${querystring.stringify(params)}`;\n    return res.redirect(endOktaSessionEndpoint);\n  };\n};","map":{"version":3,"sources":["/Users/veronica/Documents/react-portfolio-2021/portfolio-2021/node_modules/@okta/oidc-middleware/src/logout.js"],"names":["fetch","require","querystring","OIDCMiddlewareError","logout","module","exports","makeErrorHandler","emitter","err","setTimeout","emit","makeAuthorizationHeader","client_id","client_secret","Buffer","from","toString","makeTokenRevoker","issuer","errorHandler","revokeEndpoint","token_hint","token","method","headers","body","stringify","token_type_hint","then","r","ok","text","message","Promise","reject","catch","forceLogoutAndRevoke","context","options","REVOKABLE_TOKENS","indexOf","revokeToken","req","res","tokens","userContext","revokeIfExists","revokes","map","all","params","id_token_hint","id_token","post_logout_redirect_uri","logoutRedirectUri","endOktaSessionEndpoint","redirect"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2019-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst fetch = require('node-fetch');\nconst querystring = require('querystring');\nconst OIDCMiddlewareError = require('./OIDCMiddlewareError');\nconst logout = module.exports;\n\nconst makeErrorHandler = emitter => err => {\n  // Emit the errors outside the promise chain so they can be received by event listeners\n  setTimeout(function() {\n    emitter.emit('error', err);\n  }, 1);\n};\n\nconst makeAuthorizationHeader = ({ client_id, client_secret }) => \n  'Basic ' + Buffer.from(`${client_id}:${client_secret}`).toString('base64');\n\nconst makeTokenRevoker = ({ issuer, client_id, client_secret, errorHandler }) => {\n  const revokeEndpoint = `${issuer}/v1/revoke`;\n  return ({ token_hint, token }) => { \n    return fetch(revokeEndpoint, { \n      method: 'POST',\n      headers: { \n        'accepts': 'application/json',\n        'content-type': 'application/x-www-form-urlencoded',\n        'authorization': makeAuthorizationHeader({ client_id, client_secret }),\n      },\n      body: querystring.stringify({token, token_type_hint: token_hint}),\n    })\n      // eslint-disable-next-line promise/no-nesting\n      .then( r => r.ok ? r : r.text().then(message => Promise.reject(new OIDCMiddlewareError('revokeError', message)) ))\n      .catch( errorHandler ) // catch and emit - this promise chain can never fail\n  };\n};\n\n\nlogout.forceLogoutAndRevoke = context => { \n  const emitter = context.emitter;\n  let { issuer, client_id, client_secret } = context.options;\n  const REVOKABLE_TOKENS = ['refresh_token', 'access_token'];\n  // Support ORG Authorization Server\n  if (issuer.indexOf('/oauth2') === -1) {\n    issuer = issuer + '/oauth2';\n  }\n  const revokeToken = makeTokenRevoker({ issuer, client_id, client_secret, errorHandler: makeErrorHandler(emitter) });\n  return async (req, res /*, next */) => {\n    const tokens = req.userContext.tokens;\n    const revokeIfExists = token_hint => tokens[token_hint] ? revokeToken({token_hint, token: tokens[token_hint]}) : null;\n    const revokes = REVOKABLE_TOKENS.map( revokeIfExists );\n\n    // clear local session\n    req.logout();\n\n    // attempt all revokes\n    await Promise.all(revokes); // these capture (emit) all rejections, no wrapping catch needed, no early fail of .all()\n\n    const params = {\n      id_token_hint: tokens.id_token,\n      post_logout_redirect_uri: context.options.logoutRedirectUri,\n    };\n\n    // redirect to Okta to clear SSO session\n    const endOktaSessionEndpoint = `${issuer}/v1/logout?${querystring.stringify(params)}`;\n    return res.redirect(endOktaSessionEndpoint);\n  };\n};\n\n\n"]},"metadata":{},"sourceType":"script"}