{"ast":null,"code":"/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst csrf = require('csurf');\n\nconst passport = require('passport');\n\nconst {\n  Router\n} = require('express');\n\nconst querystring = require('querystring');\n\nconst uuid = require('uuid');\n\nconst bodyParser = require('body-parser');\n\nconst logout = require('./logout');\n\nconst OIDCMiddlewareError = require('./OIDCMiddlewareError');\n\nconst connectUtil = module.exports; // Create a router to easily add routes\n\nconnectUtil.createOIDCRouter = context => {\n  const routes = context.options.routes;\n  const oidcRouter = new Router();\n  oidcRouter.use(passport.initialize({\n    userProperty: 'userContext'\n  }));\n  oidcRouter.use(passport.session());\n  const loginPath = routes.login.path;\n  const loginCallbackPath = routes.loginCallback.path;\n  const logoutPath = routes.logout.path;\n  oidcRouter.use(loginPath, bodyParser.urlencoded({\n    extended: false\n  }), connectUtil.createLoginHandler(context));\n  oidcRouter.use(loginCallbackPath, connectUtil.createLoginCallbackHandler(context));\n  oidcRouter.post(logoutPath, connectUtil.createLogoutHandler(context));\n  oidcRouter.use((err, req, res, next) => {\n    // Cast all errors from the passport strategy as 401 (rather than 500, which would happen if we just call through to next())\n    res.status(401);\n    next(err);\n  });\n  return oidcRouter;\n};\n\nconnectUtil.createLoginHandler = context => {\n  const passportHandler = passport.authenticate('oidc');\n  const csrfProtection = csrf();\n  return function (req, res, next) {\n    const viewHandler = context.options.routes.login.viewHandler;\n\n    if (req.method === 'GET' && viewHandler) {\n      return csrfProtection(req, res, viewHandler.bind(null, req, res, next));\n    }\n\n    if (req.method === 'POST') {\n      return csrfProtection(req, res, err => {\n        if (err) {\n          return next(err);\n        }\n\n        const nonce = uuid.v4();\n        const state = uuid.v4();\n        const params = {\n          nonce,\n          state,\n          client_id: context.options.client_id,\n          redirect_uri: context.options.loginRedirectUri,\n          scope: context.options.scope,\n          response_type: 'code',\n          sessionToken: req.body.sessionToken\n        };\n        req.session[context.options.sessionKey] = {\n          nonce,\n          state\n        };\n        const url = `${context.options.issuer}/v1/authorize?${querystring.stringify(params)}`;\n        return res.redirect(url);\n      });\n    }\n\n    return passportHandler.apply(this, arguments);\n  };\n};\n\nconnectUtil.createLoginCallbackHandler = context => {\n  const routes = context.options.routes;\n  const customHandler = routes.loginCallback.handler;\n\n  if (!customHandler) {\n    // Passport successReturnToOrRedirect always try req.session.returnTo first if it's assigned\n    // Use successRedirect field if afterCallback url is explicitly set in config\n    const redirectOptions = {\n      failureRedirect: routes.loginCallback.failureRedirect\n    };\n\n    if (routes.loginCallback.afterCallback) {\n      redirectOptions.successRedirect = routes.loginCallback.afterCallback;\n    } else {\n      redirectOptions.successReturnToOrRedirect = '/';\n    }\n\n    return passport.authenticate('oidc', redirectOptions);\n  }\n\n  const customHandlerArity = customHandler.length;\n  return (req, res, next) => {\n    const nextHandler = err => {\n      if (err && customHandlerArity < 4) return next(err);\n\n      switch (customHandlerArity) {\n        case 4:\n          customHandler(err, req, res, next);\n          break;\n\n        case 3:\n          customHandler(req, res, next);\n          break;\n\n        default:\n          throw new OIDCMiddlewareError('middlewareError', 'Your custom callback handler must request \"next\"');\n      }\n    };\n\n    passport.authenticate(\"oidc\", (err, user, challenge) => {\n      if (user) {\n        req.logIn(user, nextHandler);\n      } else {\n        nextHandler(err || challenge);\n      }\n    })(req, res, nextHandler);\n  };\n};\n\nconnectUtil.createLogoutHandler = context => logout.forceLogoutAndRevoke(context);","map":{"version":3,"sources":["/Users/veronica/Documents/react-portfolio-2021/portfolio-2021/node_modules/@okta/oidc-middleware/src/connectUtil.js"],"names":["csrf","require","passport","Router","querystring","uuid","bodyParser","logout","OIDCMiddlewareError","connectUtil","module","exports","createOIDCRouter","context","routes","options","oidcRouter","use","initialize","userProperty","session","loginPath","login","path","loginCallbackPath","loginCallback","logoutPath","urlencoded","extended","createLoginHandler","createLoginCallbackHandler","post","createLogoutHandler","err","req","res","next","status","passportHandler","authenticate","csrfProtection","viewHandler","method","bind","nonce","v4","state","params","client_id","redirect_uri","loginRedirectUri","scope","response_type","sessionToken","body","sessionKey","url","issuer","stringify","redirect","apply","arguments","customHandler","handler","redirectOptions","failureRedirect","afterCallback","successRedirect","successReturnToOrRedirect","customHandlerArity","length","nextHandler","user","challenge","logIn","forceLogoutAndRevoke"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nconst csrf = require('csurf');\nconst passport = require('passport');\nconst { Router } = require('express');\nconst querystring = require('querystring');\nconst uuid = require('uuid');\nconst bodyParser = require('body-parser');\nconst logout = require('./logout');\nconst OIDCMiddlewareError = require('./OIDCMiddlewareError');\n\nconst connectUtil = module.exports;\n\n// Create a router to easily add routes\nconnectUtil.createOIDCRouter = context => {\n  const routes = context.options.routes;\n  const oidcRouter = new Router();\n  oidcRouter.use(passport.initialize({ userProperty: 'userContext' }));\n  oidcRouter.use(passport.session());\n\n  const loginPath = routes.login.path;\n  const loginCallbackPath = routes.loginCallback.path;\n  const logoutPath = routes.logout.path;\n\n  oidcRouter.use(loginPath, bodyParser.urlencoded({ extended: false}), connectUtil.createLoginHandler(context));\n  oidcRouter.use(loginCallbackPath, connectUtil.createLoginCallbackHandler(context));\n  oidcRouter.post(logoutPath, connectUtil.createLogoutHandler(context));\n\n  oidcRouter.use((err, req, res, next) => {\n    // Cast all errors from the passport strategy as 401 (rather than 500, which would happen if we just call through to next())\n    res.status(401);\n    next(err);\n  });\n  return oidcRouter;\n};\n\nconnectUtil.createLoginHandler = context => {\n  const passportHandler = passport.authenticate('oidc');\n  const csrfProtection = csrf();\n\n  return function(req, res, next) {\n    const viewHandler = context.options.routes.login.viewHandler;\n    if (req.method === 'GET' && viewHandler) {\n      return csrfProtection(req, res, viewHandler.bind(null, req, res, next));\n    }\n    if (req.method === 'POST') {\n      return csrfProtection(req, res, (err) => {\n        if (err) {\n          return next(err);\n        }\n        const nonce = uuid.v4();\n        const state = uuid.v4();\n        const params = {\n          nonce,\n          state,\n          client_id: context.options.client_id,\n          redirect_uri: context.options.loginRedirectUri,\n          scope: context.options.scope,\n          response_type: 'code',\n          sessionToken: req.body.sessionToken\n        };\n        req.session[context.options.sessionKey] = {\n          nonce,\n          state\n        };\n        const url = `${context.options.issuer}/v1/authorize?${querystring.stringify(params)}`;\n        return res.redirect(url);\n      });\n    }\n    return passportHandler.apply(this, arguments);\n  }\n};\n\nconnectUtil.createLoginCallbackHandler = context => {\n  const routes = context.options.routes;\n  const customHandler = routes.loginCallback.handler;\n\n  if (!customHandler) {\n    // Passport successReturnToOrRedirect always try req.session.returnTo first if it's assigned\n    // Use successRedirect field if afterCallback url is explicitly set in config\n    const redirectOptions = { failureRedirect: routes.loginCallback.failureRedirect };\n    if (routes.loginCallback.afterCallback) {\n      redirectOptions.successRedirect = routes.loginCallback.afterCallback;\n    } else {\n      redirectOptions.successReturnToOrRedirect = '/';\n    }\n\n    return passport.authenticate('oidc', redirectOptions);\n  }\n\n  const customHandlerArity = customHandler.length;\n  return (req, res, next) => {\n    const nextHandler = err => {\n      if (err && customHandlerArity < 4) return next(err);\n      switch(customHandlerArity) {\n        case 4:\n          customHandler(err, req, res, next);\n          break;\n        case 3:\n          customHandler(req, res, next);\n          break;\n        default:\n          throw new OIDCMiddlewareError('middlewareError', 'Your custom callback handler must request \"next\"');\n      }\n    };\n    passport.authenticate(\"oidc\", (err, user, challenge) => {\n      if (user) {\n        req.logIn(user, nextHandler);\n      } else {\n        nextHandler(err || challenge);\n      }\n    })(req, res, nextHandler);\n  }\n};\n\nconnectUtil.createLogoutHandler = context => logout.forceLogoutAndRevoke(context);\n\n"]},"metadata":{},"sourceType":"script"}