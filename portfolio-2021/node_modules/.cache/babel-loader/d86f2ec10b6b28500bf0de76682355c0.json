{"ast":null,"code":"const Got = require('got');\n\nconst defaultsDeep = require('lodash/defaultsDeep');\n\nconst pkg = require('../../package.json');\n\nconst isAbsoluteUrl = require('./is_absolute_url');\n\nconst {\n  HTTP_OPTIONS\n} = require('./consts');\n\nlet DEFAULT_HTTP_OPTIONS;\nlet got;\n\nconst setDefaults = options => {\n  DEFAULT_HTTP_OPTIONS = defaultsDeep(options, DEFAULT_HTTP_OPTIONS);\n  got = Got.extend(DEFAULT_HTTP_OPTIONS);\n};\n\nsetDefaults({\n  followRedirect: false,\n  headers: {\n    'User-Agent': `${pkg.name}/${pkg.version} (${pkg.homepage})`\n  },\n  retry: 0,\n  timeout: 2500,\n  throwHttpErrors: false\n});\n\nmodule.exports = function request(options, {\n  mTLS = false\n} = {}) {\n  const {\n    url\n  } = options;\n  isAbsoluteUrl(url);\n  const optsFn = this[HTTP_OPTIONS];\n  let opts;\n\n  if (optsFn) {\n    opts = optsFn.call(this, defaultsDeep(options, DEFAULT_HTTP_OPTIONS));\n  } else {\n    opts = options;\n  }\n\n  if (mTLS && (!opts.key || !opts.cert)) {\n    throw new TypeError('mutual-TLS certificate and key not set');\n  }\n\n  return got(opts);\n};\n\nmodule.exports.setDefaults = setDefaults;","map":{"version":3,"sources":["/Users/veronica/Documents/react-portfolio-2021/portfolio-2021/node_modules/openid-client/lib/helpers/request.js"],"names":["Got","require","defaultsDeep","pkg","isAbsoluteUrl","HTTP_OPTIONS","DEFAULT_HTTP_OPTIONS","got","setDefaults","options","extend","followRedirect","headers","name","version","homepage","retry","timeout","throwHttpErrors","module","exports","request","mTLS","url","optsFn","opts","call","key","cert","TypeError"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,qBAAD,CAA5B;;AAEA,MAAME,GAAG,GAAGF,OAAO,CAAC,oBAAD,CAAnB;;AAEA,MAAMG,aAAa,GAAGH,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAmBJ,OAAO,CAAC,UAAD,CAAhC;;AAEA,IAAIK,oBAAJ;AACA,IAAIC,GAAJ;;AAEA,MAAMC,WAAW,GAAIC,OAAD,IAAa;AAC/BH,EAAAA,oBAAoB,GAAGJ,YAAY,CAACO,OAAD,EAAUH,oBAAV,CAAnC;AACAC,EAAAA,GAAG,GAAGP,GAAG,CAACU,MAAJ,CAAWJ,oBAAX,CAAN;AACD,CAHD;;AAKAE,WAAW,CAAC;AACVG,EAAAA,cAAc,EAAE,KADN;AAEVC,EAAAA,OAAO,EAAE;AAAE,kBAAe,GAAET,GAAG,CAACU,IAAK,IAAGV,GAAG,CAACW,OAAQ,KAAIX,GAAG,CAACY,QAAS;AAA5D,GAFC;AAGVC,EAAAA,KAAK,EAAE,CAHG;AAIVC,EAAAA,OAAO,EAAE,IAJC;AAKVC,EAAAA,eAAe,EAAE;AALP,CAAD,CAAX;;AAQAC,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBZ,OAAjB,EAA0B;AAAEa,EAAAA,IAAI,GAAG;AAAT,IAAmB,EAA7C,EAAiD;AAChE,QAAM;AAAEC,IAAAA;AAAF,MAAUd,OAAhB;AACAL,EAAAA,aAAa,CAACmB,GAAD,CAAb;AACA,QAAMC,MAAM,GAAG,KAAKnB,YAAL,CAAf;AACA,MAAIoB,IAAJ;;AACA,MAAID,MAAJ,EAAY;AACVC,IAAAA,IAAI,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBxB,YAAY,CAACO,OAAD,EAAUH,oBAAV,CAA9B,CAAP;AACD,GAFD,MAEO;AACLmB,IAAAA,IAAI,GAAGhB,OAAP;AACD;;AAED,MAAIa,IAAI,KAAK,CAACG,IAAI,CAACE,GAAN,IAAa,CAACF,IAAI,CAACG,IAAxB,CAAR,EAAuC;AACrC,UAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;AACD;;AACD,SAAOtB,GAAG,CAACkB,IAAD,CAAV;AACD,CAfD;;AAiBAN,MAAM,CAACC,OAAP,CAAeZ,WAAf,GAA6BA,WAA7B","sourcesContent":["const Got = require('got');\nconst defaultsDeep = require('lodash/defaultsDeep');\n\nconst pkg = require('../../package.json');\n\nconst isAbsoluteUrl = require('./is_absolute_url');\nconst { HTTP_OPTIONS } = require('./consts');\n\nlet DEFAULT_HTTP_OPTIONS;\nlet got;\n\nconst setDefaults = (options) => {\n  DEFAULT_HTTP_OPTIONS = defaultsDeep(options, DEFAULT_HTTP_OPTIONS);\n  got = Got.extend(DEFAULT_HTTP_OPTIONS);\n};\n\nsetDefaults({\n  followRedirect: false,\n  headers: { 'User-Agent': `${pkg.name}/${pkg.version} (${pkg.homepage})` },\n  retry: 0,\n  timeout: 2500,\n  throwHttpErrors: false,\n});\n\nmodule.exports = function request(options, { mTLS = false } = {}) {\n  const { url } = options;\n  isAbsoluteUrl(url);\n  const optsFn = this[HTTP_OPTIONS];\n  let opts;\n  if (optsFn) {\n    opts = optsFn.call(this, defaultsDeep(options, DEFAULT_HTTP_OPTIONS));\n  } else {\n    opts = options;\n  }\n\n  if (mTLS && (!opts.key || !opts.cert)) {\n    throw new TypeError('mutual-TLS certificate and key not set');\n  }\n  return got(opts);\n};\n\nmodule.exports.setDefaults = setDefaults;\n"]},"metadata":{},"sourceType":"script"}