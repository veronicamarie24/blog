{"ast":null,"code":"/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst EventEmitter = require('events').EventEmitter;\n\nconst merge = require('lodash/merge');\n\nconst oidcUtil = require('./oidcUtil');\n\nconst connectUtil = require('./connectUtil');\n\nconst logout = require('./logout');\n\nconst {\n  assertIssuer,\n  assertClientId,\n  assertClientSecret,\n  assertAppBaseUrl,\n  assertRedirectUri\n} = require('@okta/configuration-validation');\n/**\n * Class to easily integrate OpenId Connect with Express\n *\n * @class ExpressOIDC\n */\n\n\nmodule.exports = class ExpressOIDC extends EventEmitter {\n  /**\n   * Creates an instance of ExpressOIDC\n   *\n   * @param {Object} options\n   * @param {string} options.appBaseUrl The protocol+domain+port of this app\n   * @param {string} options.issuer The OpenId Connect issuer\n   * @param {string} options.client_id This app's OpenId Connect client id\n   * @param {string} options.client_secret This app's OpenId Connect client secret\n   * @param {string} options.loginRedirectUri The location of the login authorization callback if not redirecting to this app \n   * @param {string} options.logoutRedirectUri The location of the logout callback if not redirecting to this app\n   * @param {string} [options.scope=openid] The scopes that will determine the claims on the tokens\n   * @param {string} [options.response_type=code] The OpenId Connect response type\n   * @param {number} [options.maxClockSkew=120] The maximum discrepancy allowed between server clocks in seconds\n   * @param {Object} [options.testing] Testing overrides for disabling configuration validation\n   * @param {Object} [options.routes]\n   * @param {Object} [options.routes.login]\n   * @param {string} [options.routes.login.path=/login] Path where the login middleware is hosted\n   * @param {Object} [options.routes.loginCallback\n   * @param {string} [options.routes.loginCallback.path=/authorization-code] Path where the callback middleware is hosted\n   * @param {string} [options.routes.loginCallback.afterCallback=/] Where to redirect once callback is complete\n   * @param {Function} [options.routes.loginCallback.handler] This handles responses from the OpenId Connect callback\n   */\n  constructor(options = {}) {\n    super();\n    const {\n      issuer,\n      client_id,\n      client_secret,\n      appBaseUrl,\n      loginRedirectUri,\n      logoutRedirectUri,\n      sessionKey\n    } = options; // Validate the issuer param\n\n    assertIssuer(issuer, options.testing); // Validate the client_id param\n\n    assertClientId(client_id); // Validate the client_secret param\n\n    assertClientSecret(client_secret); // Validate the appBaseUrl param\n\n    assertAppBaseUrl(appBaseUrl); // Add defaults to the options\n\n    options = merge({\n      response_type: 'code',\n      scope: 'openid',\n      routes: {\n        login: {\n          path: '/login'\n        },\n        loginCallback: {\n          path: '/authorization-code/callback'\n        },\n        logout: {\n          path: '/logout'\n        },\n        logoutCallback: {\n          path: '/'\n        }\n      },\n      sessionKey: sessionKey || `oidc:${issuer}`,\n      maxClockSkew: 120\n    }, options); // Build redirect uri unless explicitly set\n\n    options.loginRedirectUri = loginRedirectUri || `${appBaseUrl}${options.routes.loginCallback.path}`;\n    options.logoutRedirectUri = logoutRedirectUri || `${appBaseUrl}${options.routes.logoutCallback.path}`; // Validate the redirect_uri param\n\n    assertRedirectUri(options.loginRedirectUri);\n    const context = {\n      options,\n      emitter: this\n    };\n    /**\n     * Construct an Express router that should be added to an app\n     *\n     * @instance\n     * @property\n     * @memberof ExpressOIDC\n     */\n\n    this.router = connectUtil.createOIDCRouter(context);\n    /**\n     * Ensure that a user is authenticated before continuing.\n     * If not authenticated, then redirects to the login route.\n     * If not authenticated and not requesting text/html, return a 401.\n     *\n     * @instance\n     * @function\n     * @memberof ExpressOIDC\n     */\n\n    this.ensureAuthenticated = oidcUtil.ensureAuthenticated.bind(null, context);\n    /**\n     * Perform a logout at the Okta side and revoke the id/access tokens\n     * Will 200 even if user is not logged in\n     *\n     * @instance\n     * @function\n     * @memberof ExpressOIDC\n     */\n\n    this.forceLogoutAndRevoke = logout.forceLogoutAndRevoke.bind(null, context); // create client\n\n    oidcUtil.createClient(context) // eslint-disable-next-line promise/always-return\n    .then(client => {\n      context.client = client;\n      oidcUtil.bootstrapPassportStrategy(context);\n      context.emitter.emit('ready');\n    }).catch(err => context.emitter.emit('error', err));\n  }\n\n};","map":{"version":3,"sources":["/Users/veronica/Documents/react-portfolio-2021/portfolio-2021/node_modules/@okta/oidc-middleware/src/ExpressOIDC.js"],"names":["EventEmitter","require","merge","oidcUtil","connectUtil","logout","assertIssuer","assertClientId","assertClientSecret","assertAppBaseUrl","assertRedirectUri","module","exports","ExpressOIDC","constructor","options","issuer","client_id","client_secret","appBaseUrl","loginRedirectUri","logoutRedirectUri","sessionKey","testing","response_type","scope","routes","login","path","loginCallback","logoutCallback","maxClockSkew","context","emitter","router","createOIDCRouter","ensureAuthenticated","bind","forceLogoutAndRevoke","createClient","then","client","bootstrapPassportStrategy","emit","catch","err"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst merge = require('lodash/merge');\nconst oidcUtil = require('./oidcUtil');\nconst connectUtil = require('./connectUtil');\nconst logout = require('./logout');\n\nconst {\n  assertIssuer,\n  assertClientId,\n  assertClientSecret,\n  assertAppBaseUrl,\n  assertRedirectUri\n} = require('@okta/configuration-validation');\n\n/**\n * Class to easily integrate OpenId Connect with Express\n *\n * @class ExpressOIDC\n */\nmodule.exports = class ExpressOIDC extends EventEmitter {\n\n  /**\n   * Creates an instance of ExpressOIDC\n   *\n   * @param {Object} options\n   * @param {string} options.appBaseUrl The protocol+domain+port of this app\n   * @param {string} options.issuer The OpenId Connect issuer\n   * @param {string} options.client_id This app's OpenId Connect client id\n   * @param {string} options.client_secret This app's OpenId Connect client secret\n   * @param {string} options.loginRedirectUri The location of the login authorization callback if not redirecting to this app \n   * @param {string} options.logoutRedirectUri The location of the logout callback if not redirecting to this app\n   * @param {string} [options.scope=openid] The scopes that will determine the claims on the tokens\n   * @param {string} [options.response_type=code] The OpenId Connect response type\n   * @param {number} [options.maxClockSkew=120] The maximum discrepancy allowed between server clocks in seconds\n   * @param {Object} [options.testing] Testing overrides for disabling configuration validation\n   * @param {Object} [options.routes]\n   * @param {Object} [options.routes.login]\n   * @param {string} [options.routes.login.path=/login] Path where the login middleware is hosted\n   * @param {Object} [options.routes.loginCallback\n   * @param {string} [options.routes.loginCallback.path=/authorization-code] Path where the callback middleware is hosted\n   * @param {string} [options.routes.loginCallback.afterCallback=/] Where to redirect once callback is complete\n   * @param {Function} [options.routes.loginCallback.handler] This handles responses from the OpenId Connect callback\n   */\n  constructor(options = {}) {\n    super();\n\n    const {\n      issuer,\n      client_id,\n      client_secret,\n      appBaseUrl,\n      loginRedirectUri,\n      logoutRedirectUri,\n      sessionKey\n    } = options;\n\n    // Validate the issuer param\n    assertIssuer(issuer, options.testing);\n\n    // Validate the client_id param\n    assertClientId(client_id);\n\n    // Validate the client_secret param\n    assertClientSecret(client_secret);\n\n    // Validate the appBaseUrl param\n    assertAppBaseUrl(appBaseUrl);\n\n    // Add defaults to the options\n    options = merge({\n      response_type: 'code',\n      scope: 'openid',\n      routes: {\n        login: {\n          path: '/login'\n        },\n        loginCallback: {\n          path: '/authorization-code/callback'\n        },\n        logout: {\n          path: '/logout'\n        },\n        logoutCallback: {\n          path: '/'\n        }\n      },\n      sessionKey: sessionKey || `oidc:${issuer}`,\n      maxClockSkew: 120\n    }, options);\n\n    // Build redirect uri unless explicitly set\n    options.loginRedirectUri = loginRedirectUri || `${appBaseUrl}${options.routes.loginCallback.path}`;\n    options.logoutRedirectUri = logoutRedirectUri || `${appBaseUrl}${options.routes.logoutCallback.path}`;\n\n    // Validate the redirect_uri param\n    assertRedirectUri(options.loginRedirectUri);\n\n    const context = {\n      options,\n      emitter: this\n    };\n\n    /**\n     * Construct an Express router that should be added to an app\n     *\n     * @instance\n     * @property\n     * @memberof ExpressOIDC\n     */\n    this.router = connectUtil.createOIDCRouter(context);\n\n    /**\n     * Ensure that a user is authenticated before continuing.\n     * If not authenticated, then redirects to the login route.\n     * If not authenticated and not requesting text/html, return a 401.\n     *\n     * @instance\n     * @function\n     * @memberof ExpressOIDC\n     */\n    this.ensureAuthenticated = oidcUtil.ensureAuthenticated.bind(null, context);\n\n    /**\n     * Perform a logout at the Okta side and revoke the id/access tokens\n     * Will 200 even if user is not logged in\n     *\n     * @instance\n     * @function\n     * @memberof ExpressOIDC\n     */\n    this.forceLogoutAndRevoke = logout.forceLogoutAndRevoke.bind(null, context);\n\n    // create client\n    oidcUtil.createClient(context)\n    // eslint-disable-next-line promise/always-return\n    .then(client => {\n      context.client = client;\n      oidcUtil.bootstrapPassportStrategy(context);\n      context.emitter.emit('ready');\n    })\n    .catch(err => context.emitter.emit('error', err));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}