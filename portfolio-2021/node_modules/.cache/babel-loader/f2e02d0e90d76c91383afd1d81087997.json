{"ast":null,"code":"/* global BigInt */\nconst fromBase64 = base64 => {\n  return base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\nconst encode = (input, encoding = 'utf8') => {\n  return fromBase64(Buffer.from(input, encoding).toString('base64'));\n};\n\nconst encodeBuffer = buf => {\n  return fromBase64(buf.toString('base64'));\n};\n\nconst decodeToBuffer = input => {\n  return Buffer.from(input, 'base64');\n};\n\nconst decode = (input, encoding = 'utf8') => {\n  return decodeToBuffer(input).toString(encoding);\n};\n\nconst b64uJSON = {\n  encode: input => {\n    return encode(JSON.stringify(input));\n  },\n  decode: (input, encoding = 'utf8') => {\n    return JSON.parse(decode(input, encoding));\n  }\n};\n\nb64uJSON.decode.try = (input, encoding = 'utf8') => {\n  try {\n    return b64uJSON.decode(input, encoding);\n  } catch (err) {\n    return decode(input, encoding);\n  }\n};\n\nconst bnToBuf = bn => {\n  let hex = BigInt(bn).toString(16);\n\n  if (hex.length % 2) {\n    hex = `0${hex}`;\n  }\n\n  const len = hex.length / 2;\n  const u8 = new Uint8Array(len);\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    u8[i] = parseInt(hex.slice(j, j + 2), 16);\n    i += 1;\n    j += 2;\n  }\n\n  return u8;\n};\n\nconst encodeBigInt = bn => encodeBuffer(Buffer.from(bnToBuf(bn)));\n\nmodule.exports.decode = decode;\nmodule.exports.decodeToBuffer = decodeToBuffer;\nmodule.exports.encode = encode;\nmodule.exports.encodeBuffer = encodeBuffer;\nmodule.exports.JSON = b64uJSON;\nmodule.exports.encodeBigInt = encodeBigInt;","map":{"version":3,"sources":["/Users/veronica/Documents/react-portfolio-2021/portfolio-2021/node_modules/jose/lib/help/base64url.js"],"names":["fromBase64","base64","replace","encode","input","encoding","Buffer","from","toString","encodeBuffer","buf","decodeToBuffer","decode","b64uJSON","JSON","stringify","parse","try","err","bnToBuf","bn","hex","BigInt","length","len","u8","Uint8Array","i","j","parseInt","slice","encodeBigInt","module","exports"],"mappings":"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","sourcesContent":["/* global BigInt */\n\nconst fromBase64 = (base64) => {\n  return base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n}\n\nconst encode = (input, encoding = 'utf8') => {\n  return fromBase64(Buffer.from(input, encoding).toString('base64'))\n}\n\nconst encodeBuffer = (buf) => {\n  return fromBase64(buf.toString('base64'))\n}\n\nconst decodeToBuffer = (input) => {\n  return Buffer.from(input, 'base64')\n}\n\nconst decode = (input, encoding = 'utf8') => {\n  return decodeToBuffer(input).toString(encoding)\n}\n\nconst b64uJSON = {\n  encode: (input) => {\n    return encode(JSON.stringify(input))\n  },\n  decode: (input, encoding = 'utf8') => {\n    return JSON.parse(decode(input, encoding))\n  }\n}\n\nb64uJSON.decode.try = (input, encoding = 'utf8') => {\n  try {\n    return b64uJSON.decode(input, encoding)\n  } catch (err) {\n    return decode(input, encoding)\n  }\n}\n\nconst bnToBuf = (bn) => {\n  let hex = BigInt(bn).toString(16)\n  if (hex.length % 2) {\n    hex = `0${hex}`\n  }\n\n  const len = hex.length / 2\n  const u8 = new Uint8Array(len)\n\n  let i = 0\n  let j = 0\n  while (i < len) {\n    u8[i] = parseInt(hex.slice(j, j + 2), 16)\n    i += 1\n    j += 2\n  }\n\n  return u8\n}\n\nconst encodeBigInt = (bn) => encodeBuffer(Buffer.from(bnToBuf(bn)))\n\nmodule.exports.decode = decode\nmodule.exports.decodeToBuffer = decodeToBuffer\nmodule.exports.encode = encode\nmodule.exports.encodeBuffer = encodeBuffer\nmodule.exports.JSON = b64uJSON\nmodule.exports.encodeBigInt = encodeBigInt\n"]},"metadata":{},"sourceType":"script"}