{"ast":null,"code":"const base64url = require('base64url');\n\nconst assign = require('lodash/assign');\n\nconst now = require('./helpers/unix_timestamp');\n\nclass TokenSet {\n  /**\n   * @name constructor\n   * @api public\n   */\n  constructor(values) {\n    assign(this, values);\n  }\n  /**\n   * @name expires_in=\n   * @api public\n   */\n\n\n  set expires_in(value) {\n    // eslint-disable-line camelcase\n    this.expires_at = now() + Number(value);\n  }\n  /**\n   * @name expires_in\n   * @api public\n   */\n\n\n  get expires_in() {\n    // eslint-disable-line camelcase\n    return Math.max.apply(null, [this.expires_at - now(), 0]);\n  }\n  /**\n   * @name expired\n   * @api public\n   */\n\n\n  expired() {\n    return this.expires_in === 0;\n  }\n  /**\n   * @name claims\n   * @api public\n   */\n\n\n  claims() {\n    if (!this.id_token) {\n      throw new TypeError('id_token not present in TokenSet');\n    }\n\n    return JSON.parse(base64url.decode(this.id_token.split('.')[1]));\n  }\n\n}\n\nmodule.exports = TokenSet;","map":{"version":3,"sources":["/Users/veronica/Documents/react-portfolio-2021/portfolio-2021/node_modules/openid-client/lib/token_set.js"],"names":["base64url","require","assign","now","TokenSet","constructor","values","expires_in","value","expires_at","Number","Math","max","apply","expired","claims","id_token","TypeError","JSON","parse","decode","split","module","exports"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAAtB;;AAEA,MAAME,GAAG,GAAGF,OAAO,CAAC,0BAAD,CAAnB;;AAEA,MAAMG,QAAN,CAAe;AACb;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClBJ,IAAAA,MAAM,CAAC,IAAD,EAAOI,MAAP,CAAN;AACD;AAED;AACF;AACA;AACA;;;AACgB,MAAVC,UAAU,CAACC,KAAD,EAAQ;AAAE;AACtB,SAAKC,UAAL,GAAkBN,GAAG,KAAKO,MAAM,CAACF,KAAD,CAAhC;AACD;AAED;AACF;AACA;AACA;;;AACgB,MAAVD,UAAU,GAAG;AAAE;AACjB,WAAOI,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAKJ,UAAL,GAAkBN,GAAG,EAAtB,EAA0B,CAA1B,CAArB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEW,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKP,UAAL,KAAoB,CAA3B;AACD;AAED;AACF;AACA;AACA;;;AACEQ,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKC,QAAV,EAAoB;AAClB,YAAM,IAAIC,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,WAAOC,IAAI,CAACC,KAAL,CAAWnB,SAAS,CAACoB,MAAV,CAAiB,KAAKJ,QAAL,CAAcK,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAjB,CAAX,CAAP;AACD;;AA3CY;;AA8CfC,MAAM,CAACC,OAAP,GAAiBnB,QAAjB","sourcesContent":["const base64url = require('base64url');\nconst assign = require('lodash/assign');\n\nconst now = require('./helpers/unix_timestamp');\n\nclass TokenSet {\n  /**\n   * @name constructor\n   * @api public\n   */\n  constructor(values) {\n    assign(this, values);\n  }\n\n  /**\n   * @name expires_in=\n   * @api public\n   */\n  set expires_in(value) { // eslint-disable-line camelcase\n    this.expires_at = now() + Number(value);\n  }\n\n  /**\n   * @name expires_in\n   * @api public\n   */\n  get expires_in() { // eslint-disable-line camelcase\n    return Math.max.apply(null, [this.expires_at - now(), 0]);\n  }\n\n  /**\n   * @name expired\n   * @api public\n   */\n  expired() {\n    return this.expires_in === 0;\n  }\n\n  /**\n   * @name claims\n   * @api public\n   */\n  claims() {\n    if (!this.id_token) {\n      throw new TypeError('id_token not present in TokenSet');\n    }\n\n    return JSON.parse(base64url.decode(this.id_token.split('.')[1]));\n  }\n}\n\nmodule.exports = TokenSet;\n"]},"metadata":{},"sourceType":"script"}